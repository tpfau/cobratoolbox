function [annotations, qualifiers] = getAnnotations(model, database, ids, varargin)
% get a cell array of Strings containing the annotations stored for the ids
% in the given field for the given database.
%
% USAGE:
%    [annotations, qualifiers] = getAnnotations(model, database, ids, varargin)
% 
% INPUTS:
%    model:         A COBRA style model structure
%    database:      the database to retrieve data from (e.g. KEGG, BiGG
%                   etc)
%    ids:           The ids (or positions) of the elements for which to
%                   retrieve annotations
%    varargin:      Additional parameter/value pairs or a parameter struct
%                   to further specify the annotation, or add additional
%                   properties with the following parameters:
%                    * `qualifier` - The bioql qualifier to retrieve the info for (Default: 'is')
%                    * `resultType` - What format the result should have: 
%                                     * 'SBMLStruct' - A struct similar to the struct generated by the libsbml bindings
%                                     * ('list') - A cell array of strings with IDs being separated by ';' (Default)
%                                     * 'celllist' - A cell array of cell arrays of strings each cell containing one ID
%                    * `field` - the type field referenced (e.g. 'rxns', or 'mets'), if none is provided, all fields are searched for the ID    
% OUTPUT:
%    annotations:       The annotations as a cell array of strng with
%                       multiple IDs being separated by ';' (unless a
%                       different output type is choosen via the resultType
%                       parameter)
%    qualifiers:        A Cell array of the same format as the annotations,
%                       except that each element corresponds to the
%                       qualifier associated with the respective ID, only
%                       relevane if multiple qualifiers are provided
% 

resultTypes = {'sbmlstruct','list','cellist'};

parser = inputParser();
parser.addParameter('qualifier','is',@(x) all(ismember(x,getBioQualifiers())));
parser.addParameter('resultType','list',@(x) any(ismember(lower(x),resultTypes)));
parser.addParameter('field','all',@(x) ischar(x) && any(ismember(x, union('model',getCobraTypeFields()))));
parser.parse(varargin{:});

resultType = parser.Results.resultType;
qualifier = parser.Results.qualifier;
field = parser.Results.field;

% special case model. we will handle this separately.
if strcmp('model',field)
    %obtain the matching model annotations
    annotations = getMIRIAMAnnotations(model,'model','databases',{database},...
        'bioQualifiers',{qualifier});
    % convert to list, if necessary
    if ~strcmpi(resultType,'sbmlstruct')
        quals = {annotations.cvterms.qualifier};
        lannotations = {};
        qualifiers = {};
        % every element needs to be converted
        for i = 1:numel(annotations.cvterms)
            cAnnotations = {annotations.cvterms(i).ressources.id};
            cQuals = repmat(quals(i),1,numel(cAnnotations));
            lannotations = [lannotations, cAnnotations];
            qualifiers = [qualifiers, cQuals];
        end     
        annotations = lannotations;
    end
    % convert to a cellstring, 
    if strcmpi(resultType,'list')
        annotations = {strjoin(annotations,'; ')};
        qualifiers = {strjoin(qualifiers,'; ')};
    end
    return
end

% we only have to handle IDs if there is a non model annotation requested
if ischar(ids)
    ids = {ids};
end
% a char array is the same a s a cell array of a single char for the
% purposes of this function.
origids = ids;
% convert a cell
if iscell(ids)
    [pres,pos] = ismember(ids,model.(field));    
    ids = pos(pres);
    if numel(origids) ~= numel(ids)
        error('The following ids are missing from model.%s:\n%s\n',field,strjoin(setdiff(origids,model.(field)(ids)),'\n'));
    end
end
% convert a logic array
if islogical(ids)
    ids = find(ids);    
end
% 

%for a struct, we already have the functionality.
if strcmpi(resultType,'sbmlstruct')
    annotations = getMIRIAMAnnotations(model,field,'databases',{database},...
                                       'ids', model.(field)(ids),'bioQualifiers',{qualifier});
    return
end

targetField = getAnnotationFieldName(field,lower(database),qualifier);
% get the actual field name.
if iscell(targetField)
    targetField = targetField{1};
end

% extract the values from the annotation field.
if isfield(model,targetField)
    annotations = model.(targetField)(ids);
else
    annotations = cell(numel(ids),1);
end

if strcmp(resultType,'celllist')
    annotations = cellfun(@(x) strsplit(x,'; '),annotations,'Uniform', 0);
end


