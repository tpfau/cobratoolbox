function [annotations, qualifiers] = getAnnotations(model, database, ids, varargin)
% get a cell array of Strings containing the annotations stored for the ids
% in the given field for the given database.
%
% USAGE:
%    [annotations, qualifiers] = getAnnotations(model, database, ids, varargin)
% 
% INPUTS:
%    model:         A COBRA style model structure
%    database:      the database to retrieve data from (e.g. KEGG, BiGG
%                   etc)
%    ids:           The ids (or positions) of the elements for which to
%                   retrieve annotations
%    varargin:      Additional parameter/value pairs or a parameter struct
%                   to further specify the annotation, or add additional
%                   properties with the following parameters:
%                    * `qualifier` - The bioql qualifier to retrieve the info for (Default: 'is')
%                    * `resultType` - What format the result should have: 
%                                     * 'SBMLStruct' - A struct similar to the struct generated by the libsbml bindings
%                                     * ('list') - A cell array of strings with IDs being separated by ';' (Default)
%                                     * 'celllist' - A cell array of cell arrays of strings each cell containing one ID
%                    * `field` - the type field referenced (e.g. 'rxns', or 'mets'), if none is provided, all fields are searched for the ID    
% OUTPUT:
%    annotations:       The annotations as a cell array of strng with
%                       multiple IDs being separated by ';' (unless a
%                       different output type is choosen via the resultType
%                       parameter)
%    qualifiers:        A Cell array of the same format as the annotations,
%                       except that each element corresponds to the
%                       qualifier associated with the respective ID, only
%                       relevant if multiple qualifiers are provided.
%                       Cannot be combined with resultType SBMLStruct
% 

resultTypes = {'sbmlstruct','list','celllist'};

parser = inputParser();
parser.addParameter('qualifier','is',@(x) all(ismember(x,getBioQualifiers())));
parser.addParameter('resultType','list',@(x) any(ismember(lower(x),lower(resultTypes))));
parser.addParameter('field','all',@(x) (ischar(x)) && any(ismember(x, union('model',getCobraTypeFields()))));
parser.parse(varargin{:});

resultType = parser.Results.resultType;
qualifier = parser.Results.qualifier;
field = parser.Results.field;

% special case model. we will handle this separately.
if strcmp('model',field)
    %obtain the matching model annotations
    structannotations = getMIRIAMAnnotations(model,'model','databases',{database},...
        'bioQualifiers',{qualifier});
else
    structannotations = getMIRIAMAnnotations(model,'referenceField', field,'databases',{database},...
                                         'ids', ids,'bioQualifiers',{qualifier});
end

% for a struct, we already have the functionality. And we are done already.
if ~strcmpi(resultType,'sbmlstruct')  
    annotations = cell(numel(structannotations),1);    
    qualifiers = cell(numel(structannotations),1);    
    for element = 1:numel(structannotations)
        quals = {structannotations(element).cvterms.qualifier};
        lannotations = {};
        lqualifiers = {};
        % every element needs to be converted
        for i = 1:numel(structannotations(element).cvterms)
            cAnnotations = {structannotations(element).cvterms(i).ressources.id};
            cQuals = repmat(quals(i),1,numel(cAnnotations));
            lannotations = [lannotations, cAnnotations];
            lqualifiers = [lqualifiers, cQuals];
        end
        annotations{element} = lannotations;
        qualifiers{element} = lqualifiers;
    end
    % convert to a cellstring,
    if strcmpi(resultType,'list')
        annotations = cellfun(@(x) strjoin(x,'; '),annotations,'Uniform',0);
        qualifiers = cellfun(@(x) strjoin(x,'; '),qualifiers,'Uniform',0);
    end
    if ischar(ids) || strcmp('model',field)
        annotations = annotations{1};
        qualifiers = qualifiers{1};
    end
else
     annotations = structannotations;
end


end


